/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////Gerais:

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

module(stat) ::= <<
from classes import *
def main():

    <stats(stat)>

if __name__ == "__main__":
    main()
>>

block(stat) ::= <<
<stats(stat)>
>>
list(stat) ::=<<
<stat; separator=",">
>>
HoleQuestion(print) ::= <<
HoleQuestionClass([<if(print)><print; separator=","><endif>])
>>

Code(text, hole) ::=<<
Code(<text>, [<if(hole)><hole; separator=","><endif>])
>>

CodeNormal(text, hole) ::=<<
Code(<text>),[<if(hole)><hole; separator=","><endif>]
>>
CodeGetChild(text, code, hole) ::=<<
<text>,[<if(hole)><hole; separator=","><endif>]
>>
CodeGetChildMulti(text, code) ::=<<
<text>
>>

CodeOuputQuestion(code,varName) ::=<<
CodeOutputClass(<code>)
>>



printObject(printStat, hole) ::= <<
Print([<if(printStat)><printStat; separator=","><endif>], [<if(hole)><hole; separator=","><endif>],True)
>>

exprParenthesis(expr) ::= <<
(<expr>)
>>

exprConcat(expr1,expr2) ::= <<
<expr1> <expr2>
>>


exprBinary(value1, op, value2) ::= <<
<value1><op><value2>
>>

exprUnary(value1, op) ::= <<
<op><value1>
>>

labelExpr(expr1) ::= <<
(|<expr1>)
>>

pipeExpr(expr1, expr2) ::= <<
(<expr1> | <expr2>)
>>

compExpr(expr1, expr2) ::= <<
(<expr1> , <expr2>)
>>

notExpr(expr1) ::= <<
(not <expr1>)
>>

returnData(expr1) ::= <<
<expr1>
>>

assign(var,expr) ::= "<var> = <expr>"

print(expr) ::= "print(<expr>,end='')"

println(expr) ::= "print(<expr>)"

choice(expr1, expr2) ::= <<
Choice (<expr1> <expr2>)
>>

instantiate(class, expr) ::= "<class>(<expr>)"

CodeOpenQuestion(var1,var2) ::= <<
CodeOpenQuestionClass([<var1>],<var2>)
>>

CodeHoleQuestion(var1,var2) ::= <<
CodeHoleQuestionClass([<var1>],<var2>)
>>

MultiChoiceQuestion(var1,var2, var3) ::= <<
MultipleChoiceQuestionClass([<var1>],<var2>,[<var3>])
>>


ComposedQuestion(var1,var2) ::= <<
ComposedQuestionClass([<var1>],[<var2>])
>>

input(expr) ::= "input(<expr>)"

intConvert(expr) ::= "int(<expr>)"

stringConvert(expr) ::= "str(<expr>)"

for(var, list, stat) ::= <<
for <var> in <list>:
    <stats(stat)>
>>

while(expr, Ablock, Bblock) ::= <<
hasIterated = False
<Ablock>

while <expr>:
    if not hasIterated:
        hasIterated = True
    else:
        <Ablock>

    <Bblock>
>>

ifExpr(relacionalExpr, expr, expr2) ::= <<
if <relacionalExpr>:
	<expr>
<if(expr2)><expr2; separator="\n"><endif>
>>

elseExpr(expr) ::= <<
else:
	<expr>
>>

andExpr(expr1, expr2) ::= <<
(<expr1> and <expr2>)
>>

orExpr(expr1, expr2) ::= <<
(<expr1> or <expr2>)
>>

xorExpr(expr1, expr2) ::= <<
(<expr1> != <expr2>)
>>

impliesExpr(expr1, expr2) ::= <<
(not <expr1> or <expr2>)
>>


relacionalExpr(var1, condition, var2) ::=<<
(<var1> <condition> <var2>)
>>

elifExpr(relacionalExpr, expr) ::= <<
elif <relacionalExpr>:
	<expr>
>>

tryCatch(try_stat, except_stat) ::= <<
try:
    <try_stat>
except Exception as e:
    <except_stat>
>>

writeToFile(filename, data) ::= <<
with open("<filename>", "w") as f:
    f.write(<data>)
>>

Class_str(instance) ::= <<
<instance>.__str__()
>>


Rule(expr1, expr2) ::= <<
Rule("<expr1>", <expr2; separator=",">)
>>


/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////Exemplos .py:

InstanciateGroup(varGroup, groupName, childGroups) ::= <<
<varGroup> = Group("<groupName>", [<childGroups; separator=",">])
>>
InstanciateGroupUnique(varGroup, groupName, childGroups) ::= <<
<varGroup> = Group("<groupName>", <childGroups; separator=",">)
>>


childGroup(name, child) ::= <<
Group("<name>", [<child; separator=",">])
>>
OpenChildQuestion(name, child) ::= <<
Group("<name>", OpenQuestionClass([<child; separator=",">]))
>>
childQuestion(name, child) ::= <<
Group("<name>", <child>)
>>
CreateQuestion(groupName, question, questionName) ::= <<
<questionName> = <groupname>.getChild(<question>)
result.addQuestion(<groupname>,<questionName>)
>>

RunQuestion(question,gradeVar) ::= <<
<question>.Answer().Grade()
>>



/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Fraction class

FC_setNum(instance,num) ::= <<
<instance>.setNum(<num>)
>>
FC_setDen(instance,den) ::= <<
<instance>.setDen(<den>)
>>
FC_percent(instance) ::= <<
<instance>.__percent__()
>>
FC_add(instance, other) ::= <<
<instance>.__add__(<other>)
>>
FC_sub(instance, other) ::= <<
<instance>.__sub__(<other>)
>>
FC_prod(instance, other) ::= <<
<instance>.__prod__(<other>)
>>
FC_reduce(instance) ::= <<
<instance>.__reduce__()
>>
FC_value(instance) ::= <<
<instance>.__value__()
>>
FC_Percent(instance) ::= <<
<instance>.__percent__()
>>

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Result class

RC_add_Question(instance, question) ::= <<
<instance>.addQuestion(<question>)
>>
RC_setName(instance, name) ::= <<
<instance>.setName(<name>)
>>
RC_get_result(instance) ::= <<
<instance>.get_result()
>>
RC_getName(instance) ::= <<
<instance>.getName()
>>
RC_export(instance, file) ::= <<
<instance>.export_file(<file>)
>>

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Question class

QC_Grade(instance) ::= <<
<instance>.Grade()
>>
RC_Answer(instance) ::= <<
<instance>.Answer()
>>


/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Grading class

GC_getScore(instance) ::= <<
<instance>.getScore()
>>
GC_setScore(instance, score) ::= <<
<instance>.setScore(<score>)
>>
GC_addToScore(instance, value) ::= <<
<instance>.addToScore(<value>)
>>


/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////HoleQuestion class

HQC_answerQuestion(instance) ::= <<
<instance>.answerQuestion()
>>
HQC_Grade(instance) ::= <<
<instance>.Grade()
>>


/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////OpenQuestion class

OQC_Answer(instance) ::= <<
<instance>.Answer()
>>

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////CodeOpenQuestion class

COQC_Answer(instance) ::= <<
<instance>.Answer()
>>

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////CodeHoleQuestion class

CHQC_Answer(instance) ::= <<
<instance>.Answer()
>>
CHQC_Grade(instance) ::= <<
<instance>.Grade()
>>

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////MultipleChoiceQuestion class

MCQC_Answer(instance) ::= <<
<instance>.Answer()
>>
MCQC_Grade(instance) ::= <<
<instance>.Grade()
>>



/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////ComposedQuestion class

CQC_Answer(instance) ::= <<
<instance>.Answer()
>>
CQC_Grade(instance) ::= <<
<instance>.Grade()
>>


/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Print class

PC_Answer(instance) ::= <<
<instance>.Answer()
>>
PC_Grade(instance) ::= <<
<instance>.Grade()
>>
PC_getElements(instance) ::= <<
<instance>.getElements()
>>

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Element class

EC_getValue(instance) ::= <<
<instance>.getValue()
>>
EC_setValue(instance) ::= <<
<instance>.setValue()
>>

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Rule class

RC_getPoints(instance) ::= <<
<instance>.getPoints()
>>

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Hole class

HC_getId(instance) ::= <<
<instance>.getId()
>>
HC_isAnswered(instance) ::= <<
<instance>.isAnswered()
>>
HC_Fill(instance) ::= <<
<instance>.Fill()
>>
HC_isCorrect(instance) ::= <<
<instance>.isCorrect()
>>

/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Choice class

ChoiceC_Equals(instance, correctAnswer) ::= <<
<instance>.Equals(<correctAnswer>)
>>
ChoiceC_getGrade(instance) ::= <<
<instance>.getGrade()
>>


/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Code class

CC_execute(instance, stdin) ::= <<
<instance>.execute(<stdin>)
>>
CC_printCode(instance) ::= <<
<instance>.printCode()
>>
CC_getCode(instance) ::= <<
<instance>.getCode()
>>
CC_getPIL(instance) ::= <<
<instance>.getPIL()
>>
CC_Answer(instance) ::= <<
<instance>.Answer()
>>
CC_Grade(instance, rules) ::= <<
<instance>.Grade(<rules>)
>>
CC_setElements(instance, elements) ::= <<
<instance>.setElements(<elements>)
>>



/////////////////////////////////////////////////////////////////////////////////////////////
////////////////////Group class

GroupC_addChildren(instance, child) ::= <<
<instance>.addChildren(<child>)
>>

GroupC_getChildren(instance, name) ::= <<
<instance>.getChild("<name>")
>>
